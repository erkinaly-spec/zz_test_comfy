name: Test ComfyUI Endpoint

on:
  workflow_dispatch:
    inputs:
      endpoint_url:
        description: 'RunPod Endpoint URL'
        required: true
        default: 'https://your-endpoint.runpod.net'
      workflow_json:
        description: 'Test workflow JSON'
        required: false
        default: '{"4":{"inputs":{"ckpt_name":"model.safetensors"},"class_type":"CheckpointLoaderSimple"},"5":{"inputs":{"width":512,"height":512,"batch_size":1},"class_type":"EmptyLatentImage"},"6":{"inputs":{"text":"test image","clip":["4",1]},"class_type":"CLIPTextEncode"},"7":{"inputs":{"text":"blurry","clip":["4",1]},"class_type":"CLIPTextEncode"},"3":{"inputs":{"seed":123,"steps":20,"cfg":8,"sampler_name":"euler","scheduler":"normal","denoise":1,"model":["4",0],"positive":["6",0],"negative":["7",0],"latent_image":["5",0]},"class_type":"KSampler"},"8":{"inputs":{"samples":["3",0],"vae":["4",2]},"class_type":"VAEDecode"},"9":{"inputs":{"filename_prefix":"Test","images":["8",0]},"class_type":"SaveImage"}}'

jobs:
  test-endpoint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Test ComfyUI Endpoint
      run: |
        echo "üß™ Testing ComfyUI endpoint..."
        
        ENDPOINT_URL="${{ github.event.inputs.endpoint_url }}"
        API_KEY="${{ secrets.RUNPOD_API_KEY }}"
        WORKFLOW='${{ github.event.inputs.workflow_json }}'
        
        if [ -z "$API_KEY" ]; then
          echo "‚ùå RUNPOD_API_KEY secret not found"
          exit 1
        fi
        
        echo "üì§ Sending request to: $ENDPOINT_URL"
        
        RESPONSE=$(curl -s -X POST "$ENDPOINT_URL/run" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $API_KEY" \
          -d "{\"input\": {\"workflow\": $WORKFLOW, \"timeout\": 300}}")
        
        echo "üì• Response:"
        echo "$RESPONSE" | jq '.'
        
        if echo "$RESPONSE" | jq -e '.success' > /dev/null; then
          echo "‚úÖ Test successful!"
          FILENAME=$(echo "$RESPONSE" | jq -r '.outputs."9".images[0].filename')
          if [ "$FILENAME" != "null" ]; then
            echo "üñºÔ∏è Generated image: $FILENAME"
            echo "üì• Download URL: $ENDPOINT_URL/view/$FILENAME"
          fi
        else
          echo "‚ùå Test failed:"
          echo "$RESPONSE" | jq -r '.error'
          exit 1
        fi
